"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/nonprintable.ts":
/*!*********************************!*\
  !*** ./src/lib/nonprintable.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanText: function() { return /* binding */ cleanText; },\n/* harmony export */   defaultCleanOptions: function() { return /* binding */ defaultCleanOptions; },\n/* harmony export */   downloadTextAsFile: function() { return /* binding */ downloadTextAsFile; },\n/* harmony export */   findNonPrintable: function() { return /* binding */ findNonPrintable; },\n/* harmony export */   findNonPrintableWithPositions: function() { return /* binding */ findNonPrintableWithPositions; },\n/* harmony export */   stripNonPrintable: function() { return /* binding */ stripNonPrintable; },\n/* harmony export */   summarizeNonPrintable: function() { return /* binding */ summarizeNonPrintable; },\n/* harmony export */   visualizeWithTokens: function() { return /* binding */ visualizeWithTokens; }\n/* harmony export */ });\nconst NON_PRINTABLE_REGEX = RegExp(\"[\\\\p{Cc}\\\\p{Cf}\\\\p{Cs}\\\\p{Co}\\\\p{Cn}]\", \"gu\");\nconst NAMED = {\n    0x00: {\n        name: \"NULL\",\n        category: \"Cc\"\n    },\n    0x09: {\n        name: \"TAB\",\n        category: \"Cc\"\n    },\n    0x0a: {\n        name: \"LINE FEED\",\n        category: \"Cc\"\n    },\n    0x0d: {\n        name: \"CARRIAGE RETURN\",\n        category: \"Cc\"\n    },\n    0x200b: {\n        name: \"ZERO WIDTH SPACE\",\n        category: \"Cf\"\n    },\n    0x200c: {\n        name: \"ZERO WIDTH NON-JOINER\",\n        category: \"Cf\"\n    },\n    0x200d: {\n        name: \"ZERO WIDTH JOINER\",\n        category: \"Cf\"\n    },\n    0x00a0: {\n        name: \"NO-BREAK SPACE\",\n        category: \"Zs\"\n    },\n    0x2028: {\n        name: \"LINE SEPARATOR\",\n        category: \"Zl\"\n    },\n    0x2029: {\n        name: \"PARAGRAPH SEPARATOR\",\n        category: \"Zp\"\n    },\n    0x00ad: {\n        name: \"SOFT HYPHEN\",\n        category: \"Cf\"\n    },\n    0x061c: {\n        name: \"ARABIC LETTER MARK\",\n        category: \"Cf\"\n    },\n    0x200e: {\n        name: \"LEFT-TO-RIGHT MARK\",\n        category: \"Cf\"\n    },\n    0x200f: {\n        name: \"RIGHT-TO-LEFT MARK\",\n        category: \"Cf\"\n    },\n    0x202a: {\n        name: \"LEFT-TO-RIGHT EMBEDDING\",\n        category: \"Cf\"\n    },\n    0x202b: {\n        name: \"RIGHT-TO-LEFT EMBEDDING\",\n        category: \"Cf\"\n    },\n    0x202c: {\n        name: \"POP DIRECTIONAL FORMATTING\",\n        category: \"Cf\"\n    },\n    0x202d: {\n        name: \"LEFT-TO-RIGHT OVERRIDE\",\n        category: \"Cf\"\n    },\n    0x202e: {\n        name: \"RIGHT-TO-LEFT OVERRIDE\",\n        category: \"Cf\"\n    },\n    0x2066: {\n        name: \"LEFT-TO-RIGHT ISOLATE\",\n        category: \"Cf\"\n    },\n    0x2067: {\n        name: \"RIGHT-TO-LEFT ISOLATE\",\n        category: \"Cf\"\n    },\n    0x2068: {\n        name: \"FIRST STRONG ISOLATE\",\n        category: \"Cf\"\n    },\n    0x2069: {\n        name: \"POP DIRECTIONAL ISOLATE\",\n        category: \"Cf\"\n    }\n};\nfunction hex(codePoint) {\n    return \"U+\".concat(codePoint.toString(16).toUpperCase().padStart(4, \"0\"));\n}\nfunction classifyToken(codePoint, category) {\n    if (codePoint === 0x200b) return \"token-zwsp\";\n    if (codePoint === 0x00a0) return \"token-nbsp\";\n    if (codePoint === 0x00ad) return \"token-soft\";\n    if (codePoint === 0x200e || codePoint === 0x200f || codePoint === 0x202a || codePoint === 0x202b || codePoint === 0x202c || codePoint === 0x202d || codePoint === 0x202e || codePoint === 0x2066 || codePoint === 0x2067 || codePoint === 0x2068 || codePoint === 0x2069) return \"token-bidi\";\n    if (category.startsWith(\"Cc\")) return \"token-cc\";\n    if (category.startsWith(\"Cf\")) return \"token-cf\";\n    if (category.startsWith(\"Cs\")) return \"token-cs\";\n    if (category.startsWith(\"Co\")) return \"token-co\";\n    if (category.startsWith(\"Cn\")) return \"token-cn\";\n    return \"token-cf\";\n}\nfunction findNonPrintable(input) {\n    const matches = [];\n    const iterator = input.matchAll(NON_PRINTABLE_REGEX);\n    for (const m of iterator){\n        if (m.index === undefined || m[0] === undefined) continue;\n        const char = m[0];\n        const codePoint = char.codePointAt(0);\n        const named = NAMED[codePoint];\n        var _named_name, _named_category;\n        matches.push({\n            index: m.index,\n            char,\n            codePoint,\n            name: (_named_name = named === null || named === void 0 ? void 0 : named.name) !== null && _named_name !== void 0 ? _named_name : hex(codePoint),\n            category: (_named_category = named === null || named === void 0 ? void 0 : named.category) !== null && _named_category !== void 0 ? _named_category : \"C*\"\n        });\n    }\n    return matches;\n}\nfunction findNonPrintableWithPositions(input) {\n    const results = [];\n    let line = 1;\n    let column = 1;\n    for(let i = 0; i < input.length;){\n        const cp = input.codePointAt(i);\n        const ch = String.fromCodePoint(cp);\n        if (NON_PRINTABLE_REGEX.test(ch)) {\n            NON_PRINTABLE_REGEX.lastIndex = 0;\n            const named = NAMED[cp];\n            var _named_name, _named_category;\n            results.push({\n                index: i,\n                char: ch,\n                codePoint: cp,\n                name: (_named_name = named === null || named === void 0 ? void 0 : named.name) !== null && _named_name !== void 0 ? _named_name : hex(cp),\n                category: (_named_category = named === null || named === void 0 ? void 0 : named.category) !== null && _named_category !== void 0 ? _named_category : \"C*\",\n                line,\n                column\n            });\n        } else {\n            NON_PRINTABLE_REGEX.lastIndex = 0;\n        }\n        // Newline handling (CRLF counts as a single newline)\n        if (cp === 0x0d /* CR */ ) {\n            const next = input.codePointAt(i + ch.length);\n            if (next === 0x0a) {\n                i += ch.length; // consume CR\n                line += 1;\n                column = 1;\n                i += String.fromCodePoint(next).length; // consume LF\n                continue;\n            } else {\n                line += 1;\n                column = 1;\n            }\n        } else if (cp === 0x0a /* LF */  || cp === 0x2028 /* LS */  || cp === 0x2029 /* PS */ ) {\n            line += 1;\n            column = 1;\n        } else {\n            column += 1;\n        }\n        i += ch.length;\n    }\n    return results;\n}\nfunction stripNonPrintable(input) {\n    return input.replace(NON_PRINTABLE_REGEX, \"\");\n}\nfunction summarizeNonPrintable(input) {\n    const freq = new Map();\n    const iterator = input.matchAll(NON_PRINTABLE_REGEX);\n    for (const m of iterator){\n        if (m[0] === undefined) continue;\n        const cp = m[0].codePointAt(0);\n        const named = NAMED[cp];\n        const key = cp;\n        var _named_name, _named_category, _freq_get;\n        const current = (_freq_get = freq.get(key)) !== null && _freq_get !== void 0 ? _freq_get : {\n            count: 0,\n            name: (_named_name = named === null || named === void 0 ? void 0 : named.name) !== null && _named_name !== void 0 ? _named_name : hex(cp),\n            category: (_named_category = named === null || named === void 0 ? void 0 : named.category) !== null && _named_category !== void 0 ? _named_category : \"C*\"\n        };\n        current.count += 1;\n        freq.set(key, current);\n    }\n    return Array.from(freq.entries()).map((param)=>{\n        let [codePoint, v] = param;\n        return {\n            codePoint,\n            name: v.name,\n            category: v.category,\n            count: v.count\n        };\n    }).sort((a, b)=>b.count - a.count || a.codePoint - b.codePoint);\n}\nfunction visualizeWithTokens(input) {\n    const escape = (s)=>s.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n    let count = 0;\n    let result = \"\";\n    let line = 1;\n    let column = 1;\n    for(let i = 0; i < input.length;){\n        const cp = input.codePointAt(i);\n        const char = String.fromCodePoint(cp);\n        const isHidden = NON_PRINTABLE_REGEX.test(char);\n        NON_PRINTABLE_REGEX.lastIndex = 0;\n        if (isHidden) {\n            count += 1;\n            const named = NAMED[cp];\n            var _named_name;\n            const name = (_named_name = named === null || named === void 0 ? void 0 : named.name) !== null && _named_name !== void 0 ? _named_name : hex(cp);\n            var _named_category;\n            const category = (_named_category = named === null || named === void 0 ? void 0 : named.category) !== null && _named_category !== void 0 ? _named_category : \"C*\";\n            const cls = classifyToken(cp, category);\n            const title = \"\".concat(name, \" (\").concat(hex(cp), \") — Category \").concat(category, \" — at \").concat(line, \":\").concat(column);\n            result += '<span class=\"token '.concat(cls, '\" title=\"').concat(escape(title), '\">&#9676;</span>');\n        } else {\n            result += escape(char);\n        }\n        // newline handling for title positions\n        if (cp === 0x0d) {\n            const next = input.codePointAt(i + char.length);\n            if (next === 0x0a) {\n                i += char.length;\n                line += 1;\n                column = 1;\n                i += String.fromCodePoint(next).length;\n                continue;\n            } else {\n                line += 1;\n                column = 1;\n            }\n        } else if (cp === 0x0a || cp === 0x2028 || cp === 0x2029) {\n            line += 1;\n            column = 1;\n        } else {\n            column += 1;\n        }\n        i += char.length;\n    }\n    return {\n        html: result,\n        count\n    };\n}\nfunction defaultCleanOptions() {\n    return {\n        removeCc: true,\n        removeCf: true,\n        removeCs: true,\n        removeCo: true,\n        removeCn: true,\n        preserveTab: true,\n        preserveLF: true,\n        preserveCR: false,\n        removeZWSP: true,\n        nbspToSpace: true,\n        normalizeDashes: true,\n        normalizeQuotes: true\n    };\n}\nconst DASH_MAP = {\n    0x2010: \"-\",\n    0x2011: \"-\",\n    0x2012: \"-\",\n    0x2013: \"-\",\n    0x2014: \"-\",\n    0x2212: \"-\"\n};\nconst QUOTE_MAP = {\n    0x2018: \"'\",\n    0x2019: \"'\",\n    0x201a: \"'\",\n    0x201b: \"'\",\n    0x2032: \"'\",\n    0x201c: '\"',\n    0x201d: '\"',\n    0x201e: '\"',\n    0x201f: '\"',\n    0x2033: '\"'\n};\nfunction cleanText(input, options) {\n    let out = \"\";\n    for(let i = 0; i < input.length;){\n        const cp = input.codePointAt(i);\n        const ch = String.fromCodePoint(cp);\n        if (options.nbspToSpace && cp === 0x00a0) {\n            out += \" \";\n            i += ch.length;\n            continue;\n        }\n        if (options.normalizeDashes && DASH_MAP[cp]) {\n            out += DASH_MAP[cp];\n            i += ch.length;\n            continue;\n        }\n        if (options.normalizeQuotes && QUOTE_MAP[cp]) {\n            out += QUOTE_MAP[cp];\n            i += ch.length;\n            continue;\n        }\n        if (options.removeZWSP && cp === 0x200b) {\n            i += ch.length;\n            continue;\n        }\n        if (NON_PRINTABLE_REGEX.test(ch)) {\n            NON_PRINTABLE_REGEX.lastIndex = 0;\n            if (cp === 0x09 && options.preserveTab) {\n                out += ch;\n            } else if (cp === 0x0a && options.preserveLF) {\n                out += ch;\n            } else if (cp === 0x0d && options.preserveCR) {\n                out += ch;\n            } else {\n                const named = NAMED[cp];\n                var _named_category;\n                const cat = (_named_category = named === null || named === void 0 ? void 0 : named.category) !== null && _named_category !== void 0 ? _named_category : \"C*\";\n                const shouldRemove = cat.startsWith(\"Cc\") && options.removeCc || cat.startsWith(\"Cf\") && options.removeCf || cat.startsWith(\"Cs\") && options.removeCs || cat.startsWith(\"Co\") && options.removeCo || cat.startsWith(\"Cn\") && options.removeCn;\n                if (!shouldRemove) {\n                    out += ch;\n                }\n            }\n            i += ch.length;\n            continue;\n        }\n        out += ch;\n        i += ch.length;\n    }\n    return out;\n}\nfunction downloadTextAsFile(text, filename) {\n    const blob = new Blob([\n        text\n    ], {\n        type: \"text/plain;charset=utf-8\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    a.remove();\n    URL.revokeObjectURL(url);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/nonprintable.ts\n"));

/***/ })

});